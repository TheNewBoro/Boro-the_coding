using System.Numerics;

namespace 보강
{
    internal class Program
    {
        //함수 (Function)

        //  <함수 구성>
        //  일련의 코드를 하나의 이름 아래에 묶음
        //  

        static void Main(string[] args)
        {
            int coin = 400;
            while (coin >0)
            {
                Console.WriteLine("100원 동전을 꺼냅니다.");
                coin -= 100;
            }

            /**********************************************************
            for 반복문

            초기화, 조건식, 증감연산으로 구성된 반복문
            ***********************************************************/

            for (int i=0; i<5; i++)
            {
                Console.WriteLine($"for 반복문 반복 횟수:{i}");
            }

            //제어문 : 프로그램의 순차적인 실행 중 다른 문으로 제어를 전송

            //break 제어문 : 가장 가까운 반복문을 종료한다.

            //continue 제어문: 가장 가까운 반복문의 새 반복을 시작
            //제어문은 효율 때문에 쓰는 경우가 많다.
            /*
            int num = 35;
            for(int i =2;i<num;i++)
            {
                if (i % 2 == 0)
                    continue;
                if (i % 3 == 0)
                    continue;
            }
            */

            //배열(Array)

            //동일한 자료형의 요소들로 구성된 데이터 집합
            //인덱스를 통하여 배열요소(Element)에 접근할 수 있음
            //배열의 처음 요소의 인덱스는 0부터 시작함

            //배열 기본
            //배열을 만들기 위해 자료형과 크기를 정하여 생성
            //배열의 요소에 접근하기 위해 [인덱스]를 사용
            //배열의 Length를 통해 크기를 확인
            //자료형[] 배열이름 = new 자료형[크기];

            int[] scores = new int[5];
            int value = 10;
            scores[0] = 10;
            scores[1] = 20;
            scores[2] = 30;
            scores[3] = 40;

            //<배열 선언 및 초기화>
            int[] array1;
            array1 = new int[3];                        //데이터를 3개 가지는 배열 생성
            int[] array2 = new int[3] { 1, 2, 3 };      //크기가 3인 배열을 선언하고 배열 요소들을 초기화
            int[] array3 = new int[] { 1, 2, 3 };       //배열의 요소들을 초기화 하는 경우 배열의 크기를 생략 가능
            int[] array4 = { 1, 2, 3 };                 //배열의 요소들을 초기화 하는 경우 배열 생성을 생략 가능

            //<인덱스>
            //배열은 요소들을 메모리에 연속적으로 배치하는 원리로 구현
            //이를 이용하여 배열의 특정요소의 메모리주소를 계산할 수 있음
            //i번째 배열요소 메모리 주소 == 배열 시작 메모리주소 + (i*자료형의 크기)
            //이를 인덱스라고 표현함

            //<string>
            //string은 문자들의 집합으로 표현됨
            //내부적으로 문자 배열을 통해서 구현됨
            //문자열은 텍스트를 나타내는데 사용되는 cahr의 순차적 집합

            //string 사용
            string str = "abcde";
            Console.WriteLine(str);     //output : abcde

            //string은 char의 순차적 집합으로 표현 : 배열처럼 한글자에 접근가능
            Console.WriteLine(str[1]);
            Console.WriteLine(str[3]);
            



            //<string의 불변성(immutable)>
            //string은 특징상 다른 기본자료형과 다르게 크기가 정해져 있지 않은 기본자료형
            //이유는 string은 char의 집합이므로 char의 갯수에 따라 크기가 유동적
            //따라서, string은 런타임 당시에 크기가 결정되며 그 크기가 일정하지 않음
            //이에 string은 다른 기본자료형과 다르게 구조체가 아닌 클래스에 처리를 값형식처럼 동작하도록 구현
            //이를 구현하기 위해 string 간의 대입이 있을 경우 참조에 의한 주소값 복사가 아닌 깊은 복사를 진행
            //결과적으로 데이터 자체를 복사하는 값형식으로 사용하지만 힙영역을 사용하기 때문 string이 설정되면 변경할 수 없도록

            //<string.Format>
            //가비지컬렉터에 부담되지 않도록 설계된 문자열 사용방법
            //프로그램 동작 중 각 항목이 매개변수 목록의 값으로 표현을 바꿈)

            //함수
            
        }
    }
}
